{"version":3,"sources":["services/services.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Message","text","type","classes","className","Filter","inputFilter","newFilter","htmlFor","name","onChange","value","PersonForm","inputName","newName","inputNumber","newNumber","onSubmit","required","PersonTable","persons","onClickDelete","personsToShow","filter","person","display","map","key","number","onClick","data-id","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","messageText","setMessageText","messageType","setMessageType","useEffect","Services","then","response","data","forEach","index","displayMessage","timeout","setTimeout","handleSubmit","event","preventDefault","console","log","findIndex","window","confirm","personsCopy","updated","catch","error","personObject","toLowerCase","includes","concat","string","target","getAttribute","personToDelete","find","parseInt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddc62685.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// const baseUrl = 'http://localhost:3001/api/persons'\r\n// const baseUrl = 'https://shielded-woodland-44373.herokuapp.com/api/persons'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update,\r\n  remove: remove \r\n}","import React, { useState, useEffect  } from 'react'\r\nimport Services from './services/services'\r\nimport './App.css'\r\n\r\n// dictates how long a message from axios operation stays on screen\r\nconst messageTimeout = 5000\r\n\r\n// returns a message when the state of messageText changes, styled depending on parameter type\r\nconst Message = ({text, type}) => {\r\n  if (!!text) {\r\n    const classes = `Message ${type}`\r\n    return (\r\n    <div className={classes}>\r\n      <p>{text}</p>\r\n    </div>\r\n    )\r\n  } else {\r\n    return <></>\r\n  }\r\n}\r\n\r\n// component for search filter input and its label\r\nconst Filter = ({inputFilter, newFilter}) => {\r\n  return (\r\n  <>\r\n    <label htmlFor=\"filter\">filter shown with</label>\r\n    <input type=\"text\" id=\"filter\" name=\"filter\" onChange={inputFilter} value={newFilter}/>\r\n  </>\r\n  )\r\n}\r\n\r\n// used for manipulating record data: can add new names and numbers to the phonebook and change numbers\r\n// attached to existing names\r\nconst PersonForm = ({inputName, newName, inputNumber, newNumber, onSubmit}) => {\r\n  return (\r\n    <>\r\n    <form onSubmit={onSubmit}>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <label htmlFor=\"name\">name</label>\r\n            </td>\r\n            <td>\r\n              <input type=\"text\" id=\"name\" name=\"name\" required={true} onChange={inputName} value={newName}/>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <label htmlFor=\"number\">number</label>\r\n            </td>\r\n            <td>\r\n              <input type=\"text\" id=\"number\" name=\"number\" required={true} onChange={inputNumber} value={newNumber}/>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <button type=\"submit\">add</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </form>\r\n    </>\r\n  )\r\n}\r\n\r\n// displays the names and numbers in the phonebook as table rows, along with a delete button\r\n// that deletes the row's record\r\nconst PersonTable = ({persons, onClickDelete}) => {\r\n  const personsToShow = persons.filter(person => person.display === true)\r\n\r\n  const tableItems = () => personsToShow.map(person => {\r\n    return(\r\n      <tr key={person.name + \"-\" + person.id}>\r\n        <td>{person.name}</td>\r\n        <td>{person.number}</td>\r\n        <td><button onClick={onClickDelete} data-id={person.id}>delete</button></td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        {tableItems()}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  // const [persons, setPersons] = useState([\r\n  //   { name: 'Arto Hellas', number: '040-123456', display: true },\r\n  //   { name: 'Ada Lovelace', number: '39-44-5323523', display: true },\r\n  //   { name: 'Dan Abramov', number: '12-43-234345', display: true },\r\n  //   { name: 'Mary Poppendieck', number: '39-23-6423122', display: true }\r\n  // ])\r\n\r\n  const [ persons, setPersons ] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ newFilter, setNewFilter ] = useState('')\r\n  const [ messageText, setMessageText ] = useState('')\r\n  const [ messageType, setMessageType ] = useState('')\r\n\r\n  // initializes the phonebook data when the app is first rendered\r\n  useEffect(() => {\r\n    // axios\r\n    //   .get('http://localhost:3001/persons')\r\n      Services.getAll()\r\n      .then(response => {\r\n        response.data.forEach((person, index) => response.data[index].display = true)\r\n        setPersons(response.data)\r\n      })\r\n  }, [])\r\n\r\n  // filters the phonebook each time the value in the filter field changes; sets everything to be\r\n  // displayed if the filter is empty\r\n  const inputFilter = (event) => {\r\n    const string = event.target.value\r\n    setNewFilter(string)\r\n    let personsCopy = [...persons]\r\n    if (!!string) {\r\n      console.log('string exists')\r\n      personsCopy.forEach(person => person.display = person.name.toLowerCase().includes(string.toLowerCase()))\r\n    } else {\r\n      console.log('no string')\r\n      personsCopy.forEach(person => person.display = true)\r\n    }\r\n    console.log('personsCopy', personsCopy)\r\n    return setPersons(personsCopy)\r\n  }\r\n\r\n  const inputName = (event) => setNewName(event.target.value)\r\n\r\n  const inputNumber = (event) => setNewNumber(event.target.value)\r\n\r\n  const onSubmit = (event) => {\r\n    return handleSubmit(event)\r\n  }\r\n\r\n  // handles the deletion of a row in the phonebook table; uses custom attribute 'data-id- of button\r\n  // to get the id of the record\r\n  const onClickDelete = (event) => {\r\n    const id = event.target.getAttribute('data-id')\r\n    console.log(id)\r\n    const personToDelete = persons.find(person => person.id === parseInt(id))\r\n    console.log(personToDelete)\r\n    if (window.confirm(`Delete ${personToDelete.name}?`)) {\r\n        const personsCopy = persons.filter(person => person.id !== parseInt(id))\r\n        console.log(`removing record with id ${id}`)\r\n        Services.remove(id)\r\n        .then(displayMessage(`Removed ${personToDelete.name} from phonebook`, 'success', messageTimeout))\r\n        .catch(error => {\r\n          console.log(error)\r\n          displayMessage(`Information of ${newName} has already been removed from server`, 'error', messageTimeout)\r\n        })\r\n        return setPersons(personsCopy)\r\n    }\r\n  }\r\n\r\n  // sets the display message and type, making a message appear on screen\r\n  // message disappears after timeout\r\n  const displayMessage = (text, type, timeout) => {\r\n      setMessageText(text)\r\n      setMessageType(type)\r\n      setTimeout(() => {\r\n      setMessageText('')\r\n      }, timeout)\r\n  }\r\n\r\n  // decides whether to create a new record or update an exisiting one\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    console.log({persons})\r\n    const index = persons.findIndex(person => person.name === newName)\r\n    console.log(index)\r\n    if (index !== -1) {\r\n      // alert(`${newName} is already added to phonebook!`)\r\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n        let personsCopy = [...persons]\r\n        console.log({personsCopy})\r\n        personsCopy[index] = {...personsCopy[index], number: newNumber}\r\n        console.log(personsCopy[index])\r\n        setPersons(personsCopy)\r\n        const updated = personsCopy[index]\r\n        console.log(updated)\r\n        Services.update(updated.id, updated)\r\n        .then(response => {\r\n          displayMessage(`Number of ${newName} changed`, 'success', messageTimeout)\r\n          console.log(response)\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n          displayMessage(`Information of ${newName} has already been removed from server`, 'error', messageTimeout)\r\n          Services.getAll()\r\n          .then(response => {\r\n            setPersons(response.data)\r\n          })\r\n        })\r\n      }\r\n    } else {\r\n      const personObject = {\r\n        name: newName,\r\n        number: newNumber,\r\n        display: true\r\n      }\r\n\r\n      if (!!newFilter) {\r\n        personObject.display = personObject.name.toLowerCase().includes(newFilter.toLowerCase())\r\n      }\r\n\r\n      Services.create(personObject)\r\n      .then(response => {\r\n        setPersons(persons.concat(response.data))\r\n        displayMessage(`${newName} added to phonebook`, 'success', messageTimeout)\r\n        console.log(response)\r\n      })\r\n    }\r\n    setNewName('')\r\n    setNewNumber('')\r\n    // setNewFilter('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {/* <Message text=\"TEST ERROR\" type=\"error\"/> */}\r\n        <h2>Phonebook</h2>\r\n        <Message text={messageText} type={messageType}/>\r\n        <Filter inputFilter={inputFilter} newFilter={newFilter}/>\r\n      </div>\r\n      <div>\r\n        <h3>add a new</h3>\r\n        <PersonForm inputName={inputName} newName={newName} inputNumber={inputNumber} newNumber={newNumber} onSubmit={onSubmit}/>\r\n      </div>\r\n      <div>\r\n        <h3>Numbers</h3>\r\n        <PersonTable persons={persons} onClickDelete={onClickDelete}/>\r\n        {/* <Message text=\"TEST SUCCESS\" type=\"success\"/> */}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}